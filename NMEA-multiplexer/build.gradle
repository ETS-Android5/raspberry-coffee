plugins {
    id 'java'
    id 'scala'
    id 'idea'
    id 'maven'
    id 'com.github.johnrengelman.shadow' // version '4.0.2'
}

group = 'oliv.raspi.coffee'
version = '1.0'

repositories {
    mavenCentral()
    mavenLocal()
//    maven { url "https://oss.sonatype.org/content/groups/public" }
    maven { url "http://www.datanucleus.org/downloads/maven2" }
//    maven { url "http://lediouris.net/maven2" }
}

compileJava.options.compilerArgs += ["-Xlint:none"]
//compileJava {
//    options.encoding = 'UTF-8'
//    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
//}

dependencies {
    compile 'org.rxtx:rxtx:2.1.7'
    compile 'org.scala-lang:scala-library:2.13.0'
    compile "org.scala-lang:scala-compiler:2.13.0"
    compile 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.0.2'
    compile 'org.java-websocket:Java-WebSocket:1.3.7'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'org.fusesource.jansi:jansi:1.11'
    compile 'org.yaml:snakeyaml:1.21'
    compile project(':http-tiny-server')
    compile project(':I2C-SPI')
//    compile project(':SunFlower')
//    compile project(':GPS.sun.servo')
    compile project(':LoRa')
}

shadowJar {
    zip64 true
}

task runLogAnalyzer(type: JavaExec) {
    description 'Analyze a log file. Use gradlew runLogAnalyzer -Pdatafile=[datafile.nmea]'
    main = 'util.LogAnalyzer'
    classpath = sourceSets.main.runtimeClasspath
    // Another syntax to try:
    //     args project.findProperty('datafile') ?: './default-data-file.nmea'
    if (project.hasProperty('datafile')) { // gradlew -Pdatafile=XXXXX runLogAnalyzer
        args (project.getProperty('datafile'))
    }
}
