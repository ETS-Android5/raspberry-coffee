plugins {
  id 'java'
  id 'maven'
  id 'idea'
//  id 'com.moowork.node' version '0.10'
  id 'com.github.johnrengelman.shadow' // version '4.0.2'
}

shadowJar {
  zip64 true
}

group = 'oliv.raspi.coffee'
version = '1.0'

//sourceSets {
//  main {
//    java {
//      srcDir 'src'
//    }
//  }
//  test {
//    java {
//      srcDir 'tests'
//    }
//  }
//}

compileJava.options.compilerArgs += ["-Xlint:none"]

repositories {
  mavenCentral()
  mavenLocal()
  maven { url "https://oss.sonatype.org/content/groups/public" }
}

dependencies {
//compile 'com.pi4j:pi4j-core:1.1'
//compile 'com.pi4j:pi4j-core:1.2'  // -SNAPSHOT'
  compile 'com.pi4j:pi4j-core:1.3-SNAPSHOT'  // -SNAPSHOT'
  compile 'org.fusesource.jansi:jansi:1.11'
  compile 'org.json:json:20141113'
  compile project(':common-utils')
  compile project(':I2C-SPI')
  compile project(':FONA')
  compile project(':ADC')
  compile project(':HC-SR04')
}

//task runNodeServer(type: NodeTask) {
//  script = file('./node/server.js')
////args = ['&']
//  execOverrides {
//    it.ignoreExitValue = true
////  it.workingDir = './node'
//  }
//}
//
//task run(type: JavaExec, dependsOn: [ build, runNodeServer ], description: "Run it.") {
//  main = 'adc.levelreader.main.LelandPrototype'
////classpath project.configurations.default
//  classpath sourceSets.main.runtimeClasspath
////classpath sourceSets.main.output.classesDir
//}
