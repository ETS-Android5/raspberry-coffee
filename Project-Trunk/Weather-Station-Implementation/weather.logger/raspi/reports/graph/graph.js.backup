function Graph(cName,       // Canvas Name
               cWidth,      // Canvas width
               cHeight,     // Canvas height
               graphData,   // x,y tuple array
               xLabels,     // array of labels, for abscisses
               yLabels)     // array of labels, for ordinates
{
  var instance = this;
  var xScale, yScale;
  var minx, miny, maxx, maxy;
  var context;
  
  var canvas = document.getElementById(cName);

  this.minY = function(data)
  {
    var min = Number.MAX_VALUE;
    for (var i=0; i<data.length; i++)
      min = Math.min(min, data[i].value);
    return min;
  };
    
  this.maxY = function(data)
  {
    var max = Number.MIN_VALUE;
    for (var i=0; i<data.length; i++)
      max = Math.max(max, data[i].value);
    return max;
  };
  
  this.drawGraph = function(displayCanvasName, data)
  {
    context = canvas.getContext('2d');
        
    var mini = Math.floor(this.minY(data));
    var maxi = Math.ceil(this.maxY(data));
        
    context.fillStyle = "LightGray";
    context.fillRect(0, 0, canvas.width, canvas.height);    

    {
      context.beginPath();
      context.lineWidth = 1;
      context.strokeStyle = 'green';
  
      var previousPoint = data[0];
      for (var i=1; i<data.length; i++)
      {
        context.moveTo((i - 1) * xScale, cHeight - (previousPoint.value - miny) * yScale);
        context.lineTo(i * xScale, cHeight - (data[i].value - miny) * yScale);
        context.stroke();
        previousPoint = data[i];
      }
      context.closePath();
    }
    
  };
  
  (function()
   { 
     minx = 0;
     miny = instance.minY(data);
     maxx = data.length;
     maxy = instance.maxY(data);
     
//   console.log("MinX:" + minx + ", MaxX:" + maxx + ", MinY:" + miny + ", MaxY:" + maxy);
     
     xScale = cWidth / (maxx - minx);
     yScale = cHeight / (maxy - miny);
     instance.drawGraph(cName, graphData);
   })(); // Invoked automatically when new is invoked.  
};

function Tuple(_x, _y)
{
  var x = _x;
  var y = _y;
  
  this.getX = function() { return x; };
  this.getY = function() { return y; };
};

function sortTupleX(t1, t2)
{
  if (t1.getX() < t2.getX())
    return -1;
  if (t1.getX() > t2.getX())
    return 1;
  return 0;  
};
