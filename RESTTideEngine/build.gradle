plugins {
  id 'java'
//id 'scala'
  id 'maven'
  id 'com.github.johnrengelman.shadow' version '4.0.2'
//id 'findbugs'
}

group = 'oliv.raspi.coffee'
version = '1.0'

sourceSets {
  main {
    java {
      srcDir 'src/java'
    }
    resources {
      srcDir 'src/resources'
    }
  }
  test {
    java {
      srcDir 'tests/java'
    }
  }
}

repositories {
  mavenCentral()
  mavenLocal()
  maven { url "https://oss.sonatype.org/content/groups/public" }
  maven { url "http://www.datanucleus.org/downloads/maven2" }
}

dependencies {
//compile 'com.pi4j:pi4j-core:1.2-SNAPSHOT'
  compile 'com.google.code.gson:gson:2.8.0'
  compile 'org.fusesource.jansi:jansi:1.11'
  compile 'oracle:xmlparser:2.0'
  compile project (':RESTNauticalAlmanac')
  compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0'
}

shadowJar {
  zip64 true
}

//tasks.withType(FindBugs) {
//  reports {
//    xml.enabled false
//    html.enabled true
////  html.stylesheet resources.text.fromFile('config/xsl/findbugs-custom.xsl')
//  }
//}

// See https://docs.gradle.org/4.1/dsl/org.gradle.api.plugins.quality.FindBugsExtension.html
//findbugs {
//  toolVersion = "2.0.1"
//  sourceSets = [sourceSets.main]
//  ignoreFailures = true
//  reportsDir = file("$project.buildDir/findbugsReports")
//  effort = "min"
//  reportLevel = "high"
////  visitors = ["FindSqlInjection", "SwitchFallthrough"]
////  omitVisitors = ["FindNonShortCircuit"]
////  includeFilter = file("$rootProject.projectDir/config/findbugs/includeFilter.xml")
////  excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
////  excludeBugsFilter = file("$rootProject.projectDir/config/findbugs/excludeBugsFilter.xml")
//}

task harmonicsXML(type: JavaExec, dependsOn: build, description: "Generate the XML Document from the harmonic files") {
  classpath = configurations.runtime
//classpath project.configurations.default
//classpath sourceSets.main.output.classesDir
  classpath sourceSets.main.runtimeClasspath
  main = 'utils.HarmonicsToXML'
  jvmArgs "-Xms512m"
  jvmArgs "-Xmx1024m"
//args "none", "nothing", "needed"
//standardInput System.in
//jvmArgs "-Dverbose=true"
//if (project.hasProperty('key')) { // gradlew -Pkey=XXXXX runJAXRSScript
//  args ('key:' + project.getProperty('key'))
//}
  systemProperty 'verbose', 'true'
  workingDir "."
}

harmonicsXML.doFirst {
  println ">>> Run like this: gradlew harmonicsXML [--console plain] --no-daemon"
}

